followers/following{
    너무 많은 팔로워가 존재시 전부 로딩하는 것은 비효율적
    ex) insta에서 팔로워를 보려하면 일부만 보이고 스크롤을 내리면
        추가로 팔로워를 로딩

    pagination 활용{
        Offset pagination{
            전체 page 수를 count 하고
            특정 page를 입력하면 한 page당 take 수 만큼 출력
            그리고 page 수가 늘어날 때마다 records를 skip하는 수식 설정

            pros
            can jump to any page immediately
            same result in any sort order
            
            cons
            skip 100000000 record and take first 10 records
            -> still need to traverse the fist 1000000000 recordes
               before returning 10 that i asked
        }
        

        cursor based pagination{
            마지막으로 받은 records가 무엇인지 확인하는 것이 point

            pros
            scale 적인 측면에서 장점
            infinite scroll에 유리!

            cons
            특정 페이지로 바로 이동하는 것이 어렵다

        }
    }

    Regular Expression/regex(정규표현식){
        문자열 관련 parser 같은 부분에서 자주 활용됨
        https://regexone.com/ regex 관련 하나씩 연습해보는 사이트
        https://regex101.com/ debugging 및 연습
    }

    real-time massage function{
        규모가 커지면 추가로 implement 필요
        elixir or erlang과 같은 고성능 언어가
        대용량 실시간 처리에 유리
    }

    PubSub(published-subscribe engine){
        apollo server에 내장된 PubSub는 교육용으로 실사용에는 추천하지 않음
        Redis PubSub를 실사용에 추천 -> 유료

        여러개의 프로그램이 혹은 여러 서버가 해당 채널을 subscribe
        서버에서 이벤트가 발생
        모든 구독자들이 해당 이벤트를 받을 수 있음
        바로 메세지를 전송하므로  메세지를 보관하지 않음
        주로 채팅, 푸시, 알림, 스트리밍, 온라인게임 등에 사용
        
        web-socket을 사용해 실시간으로 push 를 해주기 때문에
        ws와 같은 다른 protocol 사용
        http는 사용x
    }

    protocol : http와 web-socket의 차이{
        http{
            client의 request가 있을 시에만 서버가 응답하여 data 전송 후
            바로 연결 끊기, 단방향 통신 (연결상태 유지하지 않음 stateless)
        }

        Socket{
            client와 서버가 특정 port를 통해서 연결 유지
            실시간으로 양방향 통신 가능
            client도 server에 request &
            Server 또한 clinet에게 request가능
            양방향통신(연결상태 유지 stateful)
            
            web-socket - web에서 사용하는 socket 방식 통신
            protocol로는 ws,wss 사용
            port는 HTTP(80), HTTPS(433)
            client와 serv1er가 TCP 라인을 통해 지속적으로 연결됨
        }
    }

}