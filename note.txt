Environment Variables(환경변수){
    어느 환경에 배포하느냐에 따라서 다르게 설정해야하는 항목은
    보통 운영 체제 레벨에서 환경 변수를 통해 관리
    ex) DB passward or API key 등..

    process.env라는 object로 접근 가능 import없는 전역개체이므로 어디서나 접근가능
}

prisma, movies, instaclone database 삭제
프로젝트 시작..

User{
    User 정보 스키마 및 queries, typeDefs, mutations 작성

    create account() mutation에서
    중복 username 및 email을 client.user.findFirst로 검색시
    바로 적용되는 것이 아닌 promise를 return 하기 때문에
    async - await 사용을 통해서 기다려준다.

    client object들은 OR: AND: NOT: 같은 filter들을 사용 가능
    ex) findFirst({where:{
            OR:[
                {username}
                {email}
            ]}
        });

    password 관리하기{
        hashing pakage
        bCrypt -> npm i bCrypt
        되도록이면 async & await과 함께 사용

        Hash password and store in DB{
            bcrypt.hash(myPlaintextPassword, saltRounds, function(err, hash))
        }
        Check password{
            bcrypt.compare(myPlaintextPassword, hash, function(err, result) {
            // result == true});
            bcrypt.compare(someOtherPlaintextPassword, hash, function(err, result) {
            // result == false});
        }


        hashing을 통해서 DB에 암호화된 비밀번호 저장
        반대로 hash code로 password로 복호화하는 작업은 불가
        
        creation of account process
        ex) 1234 -> hash(1234) -> DB(dafer31dd5322)

        Login Process
        ex) 1234 -> hash(1234) -> if dafer31dd5322 === DB(dafer31dd5322)
        login 성공!

        salt and papper / rainbow table?? 나중에 찾아보기


    
    }
}